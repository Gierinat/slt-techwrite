The application source code references a DNS hostname to access the database. This enables the underlying operating system to resolve the IP address dynamically. This design choice has many benefits. Additionally, the database is relational, which is the structure of choice for successful companies like Facebook and Google. Because we intend to instantiate multiple database pods within the Kubernetes deployment, additional customers will consume our new software-as-a-service offering. If we build it, they will come.

The front end uses Python flask to present both a graphical user interface (GUI) and an application programming interface (API). The GUI uses a pink and orange theme to align with our target demographic. Users can easily add items to their car and check out in less than one minute. The API uses JavaScript object notation (JSON) format for its data. Users can also track their orders using voice-activated commands via the GUI. The API response time is typically less than 20 milliseconds, and the GUI plays a "bell" sound once an order has been shipped.

The network that interconnects the application and the users requires high-availability. To achieve this, fast reroute (FRR) technologies are enabled in the core network. Although the technology is topology dependent, FRR provides adequate coverage to meet the customer's availability targets. Every individual link in the network is protected by at least one link-protecting backup and most devices are protected by node-protecting backups as well. Devices that are sparsely connected are less likely to have node-protecting backups. Node-protecting backups are less common because they provide better protection.
